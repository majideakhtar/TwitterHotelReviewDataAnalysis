/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Ftppackage;
import java.util.*;
import java.io.*;

/**
 *
 * @author comp
 */
public class Test11 extends javax.swing.JFrame {

    ArrayList<String> alltweets = new ArrayList<String>();
    ArrayList<String> possdic = new ArrayList<String>();
    ArrayList<String> negdic = new ArrayList<String>();
    public Test11() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(131, 131, 131)
                .addComponent(jButton1)
                .addContainerGap(283, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(96, 96, 96)
                .addComponent(jButton1)
                .addContainerGap(254, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try{
        String selString = "abc";
        alltweets.clear();
        possdic.clear();
        negdic.clear();
        FileInputStream fis1 = new FileInputStream("testing123.txt");
        byte bb1[] = new byte[fis1.available()];
        fis1.read(bb1);
        fis1.close();
        String aa1 = new String(bb1);
        //alltweets.add(aa1);
        StringTokenizer st = new StringTokenizer(aa1,"\r\n");
        while(st.hasMoreTokens())
        {
        alltweets.add(st.nextToken());
        }
        
        for(int i=0;i<alltweets.size();i++){
       System.out.println(alltweets.get(i));
        }
        
        
        FileInputStream fis2 = new FileInputStream("possss.txt");
        byte bb2[] = new byte[fis2.available()];
        fis2.read(bb2);
        fis2.close();
        String aa2 = new String(bb2);
        //possdic.add(aa2);
        StringTokenizer st1 = new StringTokenizer(aa2,"\r\n");
        while(st1.hasMoreTokens())
        {
        possdic.add(st1.nextToken());
        }
       System.out.println("---------------------------");
       System.out.println("posss"+possdic);
       System.out.println("---------------------------");
       
       FileInputStream fis3 = new FileInputStream("negggg.txt");
        byte bb3[] = new byte[fis3.available()];
        fis3.read(bb3);
        fis3.close();
        String aa3 = new String(bb3);
        //possdic.add(aa2);
        StringTokenizer st3 = new StringTokenizer(aa3,"\r\n");
        while(st3.hasMoreTokens())
        {
        negdic.add(st3.nextToken());
        }
        System.out.println("negg"+negdic);
        System.out.println("---------------------------");
        String tweet="";
        String tweet1="";
        String poss="";
        String negg="";
        
        ArrayList<Integer> nonDictTweets = new ArrayList<Integer>();
        nonDictTweets.clear();
        ArrayList<Integer> nonNDictTweets = new ArrayList<Integer>();
        nonNDictTweets.clear();
        
        ArrayList<Integer> bothIndexes = new ArrayList<Integer>();
        bothIndexes.clear();
        
        
        for(int i=0;i<alltweets.size();i++)
        {
            tweet=alltweets.get(i);   
            for(int j=0;j<negdic.size();j++){
                negg = negdic.get(j);
                if(tweet.contains(negg)){
                   nonNDictTweets.add(i);
                }
            }
        }
        
        for(int i=0;i<alltweets.size();i++)
        {
            tweet=alltweets.get(i);   
            for(int j=0;j<possdic.size();j++){
                poss = possdic.get(j);
                if(tweet.contains(poss)){
                   nonDictTweets.add(i);
                }
            }
        }
       
        for(int i=0;i<nonDictTweets.size();i++){
            System.out.println(nonDictTweets.get(i));
        }
        //
        System.out.println("---------------------------");
        for(int i=0;i<nonNDictTweets.size();i++){
            System.out.println(nonNDictTweets.get(i));
        }
        System.out.println("---------------------------");
        for(int i=0;i<alltweets.size();i++)
        {
            tweet1=alltweets.get(i);   
            for(int j=0;j<negdic.size();j++){
                negg = negdic.get(j);
                if(tweet1.contains(negg)){
                   nonNDictTweets.add(i);
                }
            }
        }
        //
        
        Set set = new HashSet(nonDictTweets);
        nonDictTweets.clear();
        nonDictTweets.addAll(set);
        //System.out.println(nonDictTweets);
        //System.out.println(nonDictTweets.size());
        
        ArrayList<String> temp = new ArrayList<String>();
        temp.clear();
        
        for(int i=0;i<nonDictTweets.size();i++){
            int index = nonDictTweets.get(i);
            temp.add(alltweets.get(index));
        }        
        System.out.println(temp);        
        //alltweets.removeAll(temp);
        //System.out.println(alltweets);
        
        
        //System.out.println("---------------------------");
        
        //
        Set set1 = new HashSet(nonNDictTweets);
        nonNDictTweets.clear();
        nonNDictTweets.addAll(set1);
        //System.out.println(nonNDictTweets);
        //System.out.println(nonNDictTweets.size());
        
        ArrayList<String> temp1 = new ArrayList<String>();
        temp1.clear();
        
        for(int i=0;i<nonNDictTweets.size();i++){
            int index1 = nonNDictTweets.get(i);
            temp1.add(alltweets.get(index1));
        }        
        System.out.println(temp1);        
        System.out.println("---------------------------");
        
        
        //System.out.println(alltweets);
        //
        
        ArrayList<String> allRelavantTweets = new ArrayList<String>();
        allRelavantTweets.clear();
        
        for(int i=0;i<temp.size();i++){
            allRelavantTweets.add(temp.get(i));
        }
        
        for(int i=0;i<temp1.size();i++){
            allRelavantTweets.add(temp1.get(i));
        }
        
        alltweets.removeAll(allRelavantTweets);
        
        for(int i=0;i<alltweets.size();i++){
            System.out.println(alltweets.get(i));
        }
        System.out.println("---------------------------");
        ArrayList<String> relTweets = new ArrayList<String>();
        relTweets.clear();
        
        for(int i=0;i<alltweets.size();i++){
            String tweetCurrent = alltweets.get(i);
            if(tweetCurrent.contains(selString)){
               relTweets.add(tweetCurrent); 
            }
        }
        for(int i=0;i<relTweets.size();i++){
            System.out.println(relTweets.get(i));
        }
        System.out.println("---------------------------");
        }catch(Exception e)
        {
            System.out.println(e);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Test11.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Test11.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Test11.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Test11.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Test11().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Ftppackage;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;
import org.apache.commons.net.ftp.FTP;
import org.apache.commons.net.ftp.FTPClient;
import twitter4j.Status;
import twitter4j.TwitterFactory;
import twitter4j.conf.ConfigurationBuilder;

/**
 *
 * @author comp
 */
public class test1 extends javax.swing.JFrame {

    /**
     * Creates new form test1
     */
    public test1() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        post1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        load1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        category = new javax.swing.JComboBox<>();
        jButton3 = new javax.swing.JButton();
        keyword = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        post1.setColumns(20);
        post1.setRows(5);
        jScrollPane1.setViewportView(post1);

        load1.setColumns(20);
        load1.setRows(5);
        jScrollPane2.setViewportView(load1);

        jButton1.setText("Post");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Load");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        category.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Politics", "bussiness", "Ecommerce" }));

        jButton3.setText("submit");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("analysis");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(260, 260, 260)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(237, 237, 237)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 391, Short.MAX_VALUE)
                            .addComponent(jScrollPane2))
                        .addGap(102, 102, 102)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(category, 0, 97, Short.MAX_VALUE)
                            .addComponent(jButton3)
                            .addComponent(keyword)
                            .addComponent(jButton4))))
                .addContainerGap(61, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(category, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(keyword, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jButton4)))
                .addGap(34, 34, 34)
                .addComponent(jButton2)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       try{
            
            ConfigurationBuilder cb = new ConfigurationBuilder();
          cb.setDebugEnabled(true)
                .setOAuthConsumerKey("h7rELC2CwdD4z32qHBeBfVmnr")
                .setOAuthConsumerSecret("nN444NbyxBGKBKnehgeJA6VG1yfpfgvkFwFGHfHOsefGEnjlAd")
                .setOAuthAccessToken("879626211818782720-s4JJmnIbY9Mun8zCChmgLpg3GUlemXv")
                .setOAuthAccessTokenSecret("scJcm8Ryi97rdgkgLX3RbMFKB00RNccuVDz9XQCXozSry");
          
          
         TwitterFactory tf=new TwitterFactory(cb.build());  
     String EOL1 = "\r\n";
     twitter4j.Twitter tw=tf.getInstance();
     String myTweet=post1.getText();
     Status stat= tw.updateStatus(myTweet);
          
          System.out.println("Twitter updated");
          JOptionPane.showMessageDialog(null, "Twitter updated");
    }                                        
catch(Exception e)
        {
            System.out.println("dfd"+ e);
        }
                     
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
      try{
           load1.removeAll();
           load1.setText("");
           ConfigurationBuilder cb = new ConfigurationBuilder();
            cb.setDebugEnabled(true)
                  .setOAuthConsumerKey("h7rELC2CwdD4z32qHBeBfVmnr")
                  .setOAuthConsumerSecret("nN444NbyxBGKBKnehgeJA6VG1yfpfgvkFwFGHfHOsefGEnjlAd")
                  .setOAuthAccessToken("879626211818782720-s4JJmnIbY9Mun8zCChmgLpg3GUlemXv")
                  .setOAuthAccessTokenSecret("scJcm8Ryi97rdgkgLX3RbMFKB00RNccuVDz9XQCXozSry");


            TwitterFactory tf=new TwitterFactory(cb.build());  

            twitter4j.Twitter tw=tf.getInstance();
            List<Status> status=  tw.getHomeTimeline();
            String allTweets="";
            String EOL = "\r\n";
            for (Status status1 : status)
            {
              System.out.println(status1.getUser().getName() + ":" + status1.getText());
              System.out.println("location>>"+status1.getUser().getLocation());
               System.out.println("language>>"+status1.getUser().getLang());
               allTweets +=status1.getText() + EOL;
               load1.append("Friend 1"+" : "+status1.getText() + EOL);
            }

              FileOutputStream fos= new FileOutputStream("alltweets1.txt");
              fos.write(allTweets.getBytes());
              fos.close();
              
              
              FileOutputStream fos11 = new FileOutputStream("wholetweets.txt");
    

 
 //  ftp merging code starts...
        String server = "files.000webhost.com";
        int port = 21;
        String user = "sentimentalanalysis";
        String pass = "testing1234";
        FTPClient ftpClient = new FTPClient();
        
        ftpClient.connect(server, port);
        ftpClient.login(user, pass);
        ftpClient.enterLocalPassiveMode();
        ftpClient.setFileType(FTP.BINARY_FILE_TYPE);
        File firstLocalFile = new File("alltweetsfinalftp.txt");
        String firstRemoteFile = "fresh1.txt";  
       OutputStream outputStream = new FileOutputStream(firstLocalFile);
       boolean done = ftpClient.retrieveFile(firstRemoteFile, outputStream);
       outputStream.close();
       if (done) {
        //System.out.println("The first file is Downloaded successfully.");
        //JOptionPane.showMessageDialog(null, "file is Downloaded successfully");
        //Runtime.getRuntime().exec("notepad alltweetsfinal.txt");
            }
       else{
         JOptionPane.showMessageDialog(null,"problem in loading the FTP tweets dat");
       }
       FileInputStream fisFTP = new FileInputStream("alltweetsfinalftp.txt");
       byte bbFTP[] = new byte[fisFTP.available()];
       fisFTP.read(bbFTP);
       fisFTP.close();
       String ftpTotTweets = new String(bbFTP);
       
       ArrayList<String> allFTPRelavantTweets = new ArrayList<String>();
       allFTPRelavantTweets.clear();
       
       StringTokenizer stFTP = new StringTokenizer(ftpTotTweets,"\r\n");
       while(stFTP.hasMoreTokens()){
           String tFTPTweet = stFTP.nextToken();
         //  if(tFTPTweet.startsWith("")){
               allFTPRelavantTweets.add(tFTPTweet);
          // }
       }
       
       String totFTPString = new String();
       for(int l=0;l<allFTPRelavantTweets.size();l++){
           totFTPString += allFTPRelavantTweets.get(l)+"\r\n";
       }
       
       fos11.write(totFTPString.getBytes());
       fos11.close();
              
              
              
              
       }catch(Exception e){
           System.out.println(e);
       }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try{
       String selItem = (String)category.getSelectedItem();
      
       keyword.setEditable(true);

       }catch(Exception e)
               {
               System.out.println(e);
               
               }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try{
                   
       ArrayList<String> allonline = new ArrayList<String>();
       allonline.clear();
       
       ArrayList<String> allftp = new ArrayList<String>();
       allftp.clear();
       
       ArrayList<String> finaltweetsforann = new ArrayList<String>();
       finaltweetsforann.clear();
       
       ArrayList<String> scateredtweets = new ArrayList<String>();
       scateredtweets.clear();
       
       ArrayList<String> friendtweets = new ArrayList<String>();
       friendtweets.clear();
       
       ArrayList<String> nonfriendtweets = new ArrayList<String>();
       nonfriendtweets.clear();
       
        FileInputStream fis = new FileInputStream("wholetweets.txt");
        byte bb[] = new byte[fis.available()];
        fis.read(bb);
        fis.close();
        String aa = new String(bb);
        allonline.add(aa);
        
        
        //Runtime.getRuntime().exec("notepad wholetweets.txt");
        // System.out.println("asdfasdf"+allonline);
        
        FileInputStream fis1 = new FileInputStream("alltweetsfinal.txt");
        byte bb1[] = new byte[fis1.available()];
        fis1.read(bb1);
        fis1.close();
        String aa1 = new String(bb1);
        allftp.add(aa1);
        
        //Runtime.getRuntime().exec("notepad alltweetsfinal.txt");
           // System.out.println("asdfasdf"+allftp);
           
           
           FileOutputStream fos11 = new FileOutputStream("finaltweetsforan.txt");
            fos11.write(bb);
            fos11.write(bb1);            
            fos11.close();
            
         Runtime.getRuntime().exec("notepad finaltweetsforan.txt");  
            
//         FileInputStream fis2 = new FileInputStream("finaltweetsforan.txt");
//         byte bb2[]= new byte[fis2.available()];
//         fis2.read(bb2);
//         fis2.close();
//         String aaa= new String(bb2);
//         aaa= aaa.trim();

//         StringTokenizer st = new StringTokenizer(aaa);
//         while(st.hasMoreTokens()){
//         finaltweetsforann.add(st.nextToken());
//         }
//         System.out.println("finaltweetsforan"+finaltweetsforann);
//
            BufferedReader br = new BufferedReader(new FileReader("finaltweetsforan.txt"));
        try {
            String line = br.readLine();
           
        
            while (line != null) {
                if(line.contains("sandeep3961") && (line.contains(keyword.getText()))) {                               
                    friendtweets.add(line);
                   // System.out.println(line);
                }  if (line.contains("sandeep3963")&&  (line.contains(keyword.getText()))) {
                    friendtweets.add(line);                 
                }  
                else if (line.contains("sandeep3962") && (line.contains(keyword.getText())))
                {
                nonfriendtweets.add(line);
                }
                line = br.readLine();
            }       
        } finally {
            br.close();
        }

       // 
        int fpc=0;
        int fnc=0;
        int nfpc=0;
        int nfnc=0;
        
        
        String selItem1 = category.getSelectedItem().toString();
        String serItem1 = keyword.getText();
        FrameDictionary fff = new FrameDictionary();
        fff.getPositiveDictionaryString(selItem1);
        
        String posDictString = new String();
        String negDictString = new String();
        FrameDictionary fd = new FrameDictionary();
        posDictString = fd.getPositiveDictionaryString(selItem1);
        negDictString = fd.getNegetiveDictionaryString(selItem1);
        for(int i=0;i<friendtweets.size();i++){
            String tweet = friendtweets.get(i);
            tweet = fd.cleanedTweet(tweet);
            //System.out.println("tweet after clear "+tweet);
            StringTokenizer st1 = new StringTokenizer(tweet," ");
            while(st1.hasMoreTokens()){
                String token = st1.nextToken();
                
                if(posDictString.contains(token)){
                    //System.out.println(token+" pos");
                   ++fpc;
                }
                else if(negDictString.contains(token)){
                   // System.out.println(token+" neg");
                   ++fnc;
                }
            }
        }
        
        for(int i=0;i<nonfriendtweets.size();i++){
            
            String tweet1 = nonfriendtweets.get(i);
            tweet1 = fd.cleanedTweet(tweet1);
            //System.out.println("tweet after clear "+tweet);
            StringTokenizer st1 = new StringTokenizer(tweet1," ");
            while(st1.hasMoreTokens()){
                String token = st1.nextToken();
                
                if(posDictString.contains(token)){
                    //System.out.println(token+" pos");
                   ++nfpc;
                }
                else if(negDictString.contains(token)){
                   // System.out.println(token+" neg");
                   ++nfnc;
                }
            }
        }
            System.out.println("frndposs>>>>"+fpc);
            System.out.println("frndnegg>>>"+fnc);
            
            
            
             System.out.println("nonfrndposs>>>>"+nfpc);
            System.out.println("nonfrndnegg>>>"+nfnc);
////

////
            
            
            
            
  //              
            System.out.println("frnd"+friendtweets);
            System.out.println("frnd"+friendtweets.size());            
            System.out.println("nonfrnd"+nonfriendtweets); 
            System.out.println("nonfrnd"+nonfriendtweets.size()); 
            
            
            FileInputStream fileFI = new FileInputStream("finaltweetsforan.txt");
            byte bbFI[] = new byte[fileFI.available()];
            fileFI.read(bbFI);
            fileFI.close();
            
            String strFI = new String(bbFI);
            strFI = strFI.trim();
            
            ArrayList<String> relTweetsFI = new ArrayList<String>();
            relTweetsFI.clear();
            StringTokenizer stFI = new StringTokenizer(strFI,"\r\n");
            String kWord = keyword.getText();
            while(stFI.hasMoreTokens()){
                String tempFI = stFI.nextToken();
                if(tempFI.contains(kWord)){
                relTweetsFI.add(tempFI);
                }
            }
            
            String dataToFI = "";
            for(int i=0;i<relTweetsFI.size();i++){
                dataToFI += relTweetsFI.get(i)+"\r\n";
            }
            dataToFI = dataToFI.trim();
            
            FileOutputStream fosFI = new FileOutputStream("finalFI.txt");
            fosFI.write(dataToFI.getBytes());
            fosFI.close();
            
            Runtime.getRuntime().exec("notepad finalFI.txt");
            
        }catch(Exception e)
        {
            System.out.println(e);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(test1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(test1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(test1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(test1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new test1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> category;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField keyword;
    private javax.swing.JTextArea load1;
    private javax.swing.JTextArea post1;
    // End of variables declaration//GEN-END:variables
}

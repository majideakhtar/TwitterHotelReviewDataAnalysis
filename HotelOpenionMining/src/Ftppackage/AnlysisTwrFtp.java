/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Ftppackage;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;
import org.jfree.ui.RefineryUtilities;

/**
 *
 * @author comp
 */
public class AnlysisTwrFtp extends javax.swing.JFrame {

    
        int pCount = 0;
        int nCount = 0;
        int pNCount = 0;
        int nPCount = 0;
        int ppCount = 0;
        int nnCount = 0;
        int Tweetsize=0;
        
        ArrayList<String> alltweets = new ArrayList<String>();
    ArrayList<String> possdic = new ArrayList<String>();
    ArrayList<String> negdic = new ArrayList<String>();
    
    
    public AnlysisTwrFtp() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        category = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        entries = new javax.swing.JTextField();
        analysis = new javax.swing.JButton();
        analisys = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(855, 490));
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Select Category");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(167, 106, 109, 17);

        category.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        category.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hotel" }));
        category.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryActionPerformed(evt);
            }
        });
        getContentPane().add(category);
        category.setBounds(320, 95, 193, 38);

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setText("Fetch");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(320, 164, 105, 31);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Keywords");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(207, 260, 69, 17);

        entries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entriesActionPerformed(evt);
            }
        });
        getContentPane().add(entries);
        entries.setBounds(320, 254, 207, 33);

        analysis.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        analysis.setText("Analysis");
        analysis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analysisActionPerformed(evt);
            }
        });
        getContentPane().add(analysis);
        analysis.setBounds(602, 331, 104, 36);

        analisys.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        analisys.setText("Association ");
        analisys.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analisysActionPerformed(evt);
            }
        });
        getContentPane().add(analisys);
        analisys.setBounds(320, 331, 255, 36);

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton3.setText("Labeled and UnLabeled Analysis");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(320, 399, 251, 37);

        jButton4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton4.setText("Accuracy");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4);
        jButton4.setBounds(602, 405, 95, 25);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Ftppackage/analysis.jpg"))); // NOI18N
        jLabel3.setText("jLabel3");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(0, 0, 855, 490);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void entriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entriesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_entriesActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       try{
       String selItem = (String)category.getSelectedItem();
      
       entries.setEditable(true);
       analysis.setEnabled(true);
       }catch(Exception e)
               {
               System.out.println(e);
               
               }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void analysisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analysisActionPerformed
        try{
                   
       ArrayList<String> allonline = new ArrayList<String>();
       allonline.clear();
       
       ArrayList<String> allftp = new ArrayList<String>();
       allftp.clear();
       
       ArrayList<String> finaltweetsforann = new ArrayList<String>();
       finaltweetsforann.clear();
       
       ArrayList<String> scateredtweets = new ArrayList<String>();
       scateredtweets.clear();
       
       ArrayList<String> friendtweets = new ArrayList<String>();
       friendtweets.clear();
       
       ArrayList<String> nonfriendtweets = new ArrayList<String>();
       nonfriendtweets.clear();
       
        FileInputStream fis = new FileInputStream("wholetweets.txt");
        byte bb[] = new byte[fis.available()];
        fis.read(bb);
        fis.close();
        String aa = new String(bb);
        allonline.add(aa);
        
        
        //Runtime.getRuntime().exec("notepad wholetweets.txt");
        // System.out.println("asdfasdf"+allonline);
        
        FileInputStream fis1 = new FileInputStream("alltweetsfinal.txt");
        byte bb1[] = new byte[fis1.available()];
        fis1.read(bb1);
        fis1.close();
        String aa1 = new String(bb1);
        allftp.add(aa1);
        
        //Runtime.getRuntime().exec("notepad alltweetsfinal.txt");
           // System.out.println("asdfasdf"+allftp);
           
           
           FileOutputStream fos11 = new FileOutputStream("finaltweetsforan.txt");
            fos11.write(bb);
            fos11.write(bb1);            
            fos11.close();
            
         //Runtime.getRuntime().exec("notepad finaltweetsforan.txt");  
         
         
         
         /// only text based tweets display...start
         
         FileInputStream fisScatter = new FileInputStream("finaltweetsforan.txt");
         byte bbScatter[] = new byte[fisScatter.available()];
         fisScatter.read(bbScatter);
         fisScatter.close();
         String onlyScatterString = new String(bbScatter);
         onlyScatterString = onlyScatterString.trim();
         
         
         ArrayList<String> onlyScatterTweets = new ArrayList<String>();
         onlyScatterTweets.clear();
         StringTokenizer stScatter = new StringTokenizer(onlyScatterString,"\r\n");
         while(stScatter.hasMoreTokens()){
            String tempScatter = stScatter.nextToken();
            
            if(tempScatter.contains(entries.getText())){
                onlyScatterTweets.add(tempScatter);
            }
         }
         
         System.out.println(onlyScatterTweets);
         
         String finalScatterText ="";
         
         for(int i=0;i<onlyScatterTweets.size();i++){
             finalScatterText += onlyScatterTweets.get(i)+"\r\n";
             
         }
         
         finalScatterText = finalScatterText.trim();
         
         FileOutputStream scatterFile = new FileOutputStream("scatterfinal.txt");
         scatterFile.write(finalScatterText.getBytes());
         scatterFile.close();
         
        // Runtime.getRuntime().exec("notepad scatterfinal.txt");  
         
         ///only text based tweets display..end
         
         
            
//         FileInputStream fis2 = new FileInputStream("finaltweetsforan.txt");
//         byte bb2[]= new byte[fis2.available()];
//         fis2.read(bb2);
//         fis2.close();
//         String aaa= new String(bb2);
//         aaa= aaa.trim();

//         StringTokenizer st = new StringTokenizer(aaa);
//         while(st.hasMoreTokens()){
//         finaltweetsforann.add(st.nextToken());
//         }
//         System.out.println("finaltweetsforan"+finaltweetsforann);
//
            BufferedReader br = new BufferedReader(new FileReader("finaltweetsforan.txt"));
        try {
            String line = br.readLine();
           
        
            while (line != null) {
                if(line.contains("sandeep3961") && (line.contains(entries.getText()))) {                               
                    friendtweets.add(line);
                   // System.out.println(line);
                }  if (line.contains("sandeep3963")&&  (line.contains(entries.getText()))) {
                    friendtweets.add(line);                 
                }  
                else if (line.contains("sandeep3962") && (line.contains(entries.getText())))
                {
                nonfriendtweets.add(line);
                }
                line = br.readLine();
            }       
        } finally {
            br.close();
        }

       // 
        int fpc=0;
        int fnc=0;
        int nfpc=0;
        int nfnc=0;
        
        
        String selItem1 = category.getSelectedItem().toString();
        String serItem1 = entries.getText();
        FrameDictionary fff = new FrameDictionary();
        fff.getPositiveDictionaryString(selItem1);
        
        String posDictString = new String();
        String negDictString = new String();
        FrameDictionary fd = new FrameDictionary();
        posDictString = fd.getPositiveDictionaryString(selItem1);
        negDictString = fd.getNegetiveDictionaryString(selItem1);
        for(int i=0;i<friendtweets.size();i++){
            String tweet = friendtweets.get(i);
            tweet = fd.cleanedTweet(tweet);
            //System.out.println("tweet after clear "+tweet);
            StringTokenizer st1 = new StringTokenizer(tweet," ");
            while(st1.hasMoreTokens()){
                String token = st1.nextToken();
                
                if(posDictString.contains(token)){
                    //System.out.println(token+" pos");
                   ++fpc;
                }
                else if(negDictString.contains(token)){
                   // System.out.println(token+" neg");
                   ++fnc;
                }
            }
        }
        
        for(int i=0;i<nonfriendtweets.size();i++){
            
            String tweet1 = nonfriendtweets.get(i);
            tweet1 = fd.cleanedTweet(tweet1);
            //System.out.println("tweet after clear "+tweet);
            StringTokenizer st1 = new StringTokenizer(tweet1," ");
            while(st1.hasMoreTokens()){
                String token = st1.nextToken();
                
                if(posDictString.contains(token)){
                    //System.out.println(token+" pos");
                   ++nfpc;
                }
                else if(negDictString.contains(token)){
                   // System.out.println(token+" neg");
                   ++nfnc;
                }
            }
        }
            //System.out.println("frndposs>>>>"+fpc);
            //System.out.println("frndnegg>>>"+fnc);
            
            
            
             //System.out.println("nonfrndposs>>>>"+nfpc);
            //System.out.println("nonfrndnegg>>>"+nfnc);
//////

////
            
            
            
            
  //              
            //System.out.println("frnd"+friendtweets);
           // System.out.println("frnd"+friendtweets.size());            
           // System.out.println("nonfrnd"+nonfriendtweets); 
           // System.out.println("nonfrnd"+nonfriendtweets.size()); 
            
        }catch(Exception e)
        {
            System.out.println(e);
        }
    }//GEN-LAST:event_analysisActionPerformed

    private void categoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_categoryActionPerformed

    private void analisysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analisysActionPerformed
        try{
            //Politics, ECommerce, Bussiness

        String selItem = category.getSelectedItem().toString();
        System.out.println(selItem);
        String serItem = entries.getText();
        ArrayList<String> allTweets = new ArrayList<String>();
        allTweets.clear();
       
        FileInputStream fis = new FileInputStream("wholetweets.txt");
        byte bb[] = new byte[fis.available()];
        fis.read(bb);
        fis.close();       
        String allTweetsTxt = new String(bb);
        StringTokenizer st = new StringTokenizer(allTweetsTxt,"\r\n");        
        while(st.hasMoreTokens()){
        String temp = st.nextToken();        
           allTweets.add(temp); 

        }  
        ArrayList<String> allScatteredTweets = new ArrayList<String>();
        allScatteredTweets.clear();

        for(int i=0;i<allTweets.size();i++){
           String tweet = allTweets.get(i);
           if(tweet.contains(serItem)){
               allScatteredTweets.add(tweet);
           }
        }
        
       
        
        String posDictString = new String();
        String negDictString = new String();
        FrameDictionary fd = new FrameDictionary();
        posDictString = fd.getPositiveDictionaryString(selItem);
        negDictString = fd.getNegetiveDictionaryString(selItem);
        for(int i=0;i<allScatteredTweets.size();i++){
            String tweet = allScatteredTweets.get(i);
            tweet = fd.cleanedTweet(tweet);
            //System.out.println("tweet after clear "+tweet);
            StringTokenizer st1 = new StringTokenizer(tweet," ");
            while(st1.hasMoreTokens()){
                String token = st1.nextToken();
                
                if(posDictString.contains(token)){
                    System.out.println(token+" pos");
                   ++pCount;
                }
                else if(negDictString.contains(token)){
                    System.out.println(token+" neg");
                   ++nCount;
                }
            }
        }
        //Positiveneg starts
        
        for(int i=0;i<allScatteredTweets.size();i++){
            String tweet = allScatteredTweets.get(i);
            tweet = fd.cleanedTweet(tweet);
            String firstItem = "";
            String secondItem = "";
            ArrayList<String> ppDictionary = new ArrayList<String>();
            ppDictionary.clear();
            ppDictionary = fd.getPosNegAssociations(selItem);
            for(int j=0;j<ppDictionary.size();j++){
                String dictItem = ppDictionary.get(j);
                //System.out.println(dictItem);
                StringTokenizer st2 = new StringTokenizer(dictItem," ");
                while(st2.hasMoreTokens()){
                    firstItem = st2.nextToken();
                    secondItem = st2.nextToken();
                }
                
                if(tweet.contains(firstItem) && tweet.contains(secondItem)&&posDictString.contains(firstItem)&&negDictString.contains(secondItem) ){
                 int firstPos = tweet.indexOf(firstItem);
                 int secondPos = tweet.indexOf(secondItem);
                 if(secondPos>firstPos){
                ++pNCount;
                
                
                
                 }
            }
            }
        }
        //Positiveneg ends
        
        //negpos starts
        for(int i=0;i<allScatteredTweets.size();i++){
            String tweet = allScatteredTweets.get(i);
            tweet = fd.cleanedTweet(tweet);
            String firstItem = "";
            String secondItem = "";
            ArrayList<String> npDictionary = new ArrayList<String>();
            npDictionary.clear();
            npDictionary = fd.getNegPosAssociations(selItem);
            for(int j=0;j<npDictionary.size();j++){
                String dictItem = npDictionary.get(j);
                //System.out.println(dictItem);
                StringTokenizer st2 = new StringTokenizer(dictItem," ");
                while(st2.hasMoreTokens()){
                    firstItem = st2.nextToken();
                    secondItem = st2.nextToken();
                }
                
                if(tweet.contains(firstItem) && tweet.contains(secondItem)&&negDictString.contains(firstItem)&&posDictString.contains(secondItem) ){
                 int firstPos = tweet.indexOf(firstItem);
                 int secondPos = tweet.indexOf(secondItem);
                 if(secondPos>firstPos){
                ++nPCount;
                
                 }
            }
            }
        }
        //negpos ends
        //pospos starts
        
        for(int i=0;i<allScatteredTweets.size();i++){
            String tweet = allScatteredTweets.get(i);
            tweet = fd.cleanedTweet(tweet);
            String firstItem = "";
            String secondItem = "";
            ArrayList<String> pospDictionary = new ArrayList<String>();
            pospDictionary.clear();
            pospDictionary = fd.getPosPosAssociations(selItem);
            for(int j=0;j<pospDictionary.size();j++){
                String dictItem = pospDictionary.get(j);
                //System.out.println(dictItem);
                StringTokenizer st2 = new StringTokenizer(dictItem," ");
                while(st2.hasMoreTokens()){
                    firstItem = st2.nextToken();
                    secondItem = st2.nextToken();
                }
                
                if(tweet.contains(firstItem) && tweet.contains(secondItem)&&posDictString.contains(firstItem)&&posDictString.contains(secondItem) ){
                 int firstPos = tweet.indexOf(firstItem);
                 int secondPos = tweet.indexOf(secondItem);
                 if(secondPos>firstPos){
                ++ppCount;
               }
            }
            }
        }
        //pospos ends
        
       //negneg starts
       for(int i=0;i<allScatteredTweets.size();i++){
            String tweet = allScatteredTweets.get(i);
            tweet = fd.cleanedTweet(tweet);
            String firstItem = "";
            String secondItem = "";
            ArrayList<String> negnDictionary = new ArrayList<String>();
            negnDictionary.clear();
            negnDictionary = fd.getNegNegAssociations(selItem);
            for(int j=0;j<negnDictionary.size();j++){
                String dictItem = negnDictionary.get(j);
                //System.out.println(dictItem);
                StringTokenizer st2 = new StringTokenizer(dictItem," ");
                while(st2.hasMoreTokens()){
                    firstItem = st2.nextToken();
                    secondItem = st2.nextToken();
                }
                
                if(tweet.contains(firstItem) && tweet.contains(secondItem)&&negDictString.contains(firstItem)&&negDictString.contains(secondItem) ){
                 int firstPos = tweet.indexOf(firstItem);
                 int secondPos = tweet.indexOf(secondItem);
                 if(secondPos>firstPos){
                ++nnCount;
                
                 }
            }
            }
        }
       //negneg ends
        System.out.println("pos count "+pCount);
        System.out.println("neg count "+nCount);
        System.out.println("posneg count "+pNCount);
        System.out.println("negpos count "+nPCount);
        System.out.println("pospos count "+ppCount);
        System.out.println("negneg count "+nnCount);
        
      
        
        
        //serialization code starts...,
        Tweetsize=pCount+nCount+pNCount+nPCount+ppCount+nnCount;
         System.out.println("total tweet count "+Tweetsize);
        String wholeConsols = pNCount+" "+nPCount+" "+ppCount+" "+nnCount;
        FileOutputStream fos = new FileOutputStream("consolt.txt");
        ObjectOutputStream os = new ObjectOutputStream(fos);
        os.writeObject(wholeConsols);
        os.close();
        fos.close();
        
        
        //serialization code ends.
        
        
        
        
        
        int pMixedTotalCount = pNCount + nPCount + ppCount;
        int nMixedTotalCount = pNCount + nPCount + nnCount;
        
        int nonmix1=pCount+nCount;
        int mix1=pNCount+nPCount+ppCount+nnCount;
        
        int onlyPCount = pCount - pMixedTotalCount;
        int onlyNCount = nCount - nMixedTotalCount;
        
        
        
        PieChartAnalisys demo1 = new PieChartAnalisys( "Tweet postings" ,nonmix1,mix1);  
        demo1.setSize( 560 , 367 );    
        RefineryUtilities.centerFrameOnScreen( demo1 );    
        demo1.setVisible( true ); 
        
//        PieChartAnalisys demo2 = new PieChartAnalisys( "Tweet postings negetive" ,onlyNCount,nMixedTotalCount);  
//        demo2.setSize( 560 , 367 );    
//        RefineryUtilities.centerFrameOnScreen( demo2 );    
//        demo2.setVisible( true );
       
            }catch(Exception e)
        {
            System.out.println(e);
        }
    }//GEN-LAST:event_analisysActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
      try{
        
            alltweets.clear();
            possdic.clear();
        FileInputStream fis1 = new FileInputStream("finaltweetsforan.txt");
        byte bb1[] = new byte[fis1.available()];
        fis1.read(bb1);
        fis1.close();
        String aa1 = new String(bb1);
        //alltweets.add(aa1);
        StringTokenizer st = new StringTokenizer(aa1,"\r\n");
        while(st.hasMoreTokens())
        {
        alltweets.add(st.nextToken());
        }
      //  System.out.println("alltweets"+alltweets);
        
        
        FileInputStream fis2 = new FileInputStream("hotelpos.txt");
        byte bb2[] = new byte[fis2.available()];
        fis2.read(bb2);
        fis2.close();
        String aa2 = new String(bb2);
        //possdic.add(aa2);
        StringTokenizer st1 = new StringTokenizer(aa2,"\r\n");
        while(st1.hasMoreTokens())
        {
        possdic.add(st1.nextToken());
        }
       // System.out.println("posss"+possdic);
       
       
       FileInputStream fis3 = new FileInputStream("hotelneg.txt");
        byte bb3[] = new byte[fis3.available()];
        fis3.read(bb3);
        fis3.close();
        String aa3 = new String(bb3);
        //possdic.add(aa2);
        StringTokenizer st3 = new StringTokenizer(aa3,"\r\n");
        while(st3.hasMoreTokens())
        {
        negdic.add(st3.nextToken());
        }
       // System.out.println("posss"+possdic);
        String tweet="";
        String tweet1="";
        String poss="";
        String negg="";
        
        ArrayList<Integer> nonDictTweets = new ArrayList<Integer>();
        nonDictTweets.clear();
        ArrayList<Integer> nonNDictTweets = new ArrayList<Integer>();
        nonNDictTweets.clear();
        for(int i=0;i<alltweets.size();i++)
        {
            tweet=alltweets.get(i);   
            for(int j=0;j<possdic.size();j++){
                poss = possdic.get(j);
                if(tweet.contains(poss)){
                   nonDictTweets.add(i);
                   
                }
            }
        }
        
        //
        
        for(int i=0;i<alltweets.size();i++)
        {
            tweet1=alltweets.get(i);   
            for(int j=0;j<negdic.size();j++){
                negg = negdic.get(j);
                if(tweet1.contains(negg)){
                   nonNDictTweets.add(i);
         
                }
            }
        }
        //
        
        Set set = new HashSet(nonDictTweets);
        nonDictTweets.clear();
        nonDictTweets.addAll(set);
        //System.out.println(nonDictTweets);
        //System.out.println(nonDictTweets.size());
        
        ArrayList<String> temp = new ArrayList<String>();
        temp.clear();
        
        for(int i=0;i<nonDictTweets.size();i++){
            int index = nonDictTweets.get(i);
            temp.add(alltweets.get(index));
        }        
        //System.out.println(temp);        
        //alltweets.removeAll(temp);
        //System.out.println(alltweets);
        
        
        //System.out.println("---------------------------");
        
        //
         //  System.out.println("NonDictionary:"+nonNDictTweets);
        Set set1 = new HashSet(nonNDictTweets);
        nonNDictTweets.clear();
        nonNDictTweets.addAll(set1);
        //System.out.println(nonNDictTweets);
        //System.out.println(nonNDictTweets.size());
        
        ArrayList<String> temp1 = new ArrayList<String>();
        temp1.clear();
        
        for(int i=0;i<nonNDictTweets.size();i++){
            int index1 = nonNDictTweets.get(i);
            temp1.add(alltweets.get(index1));
        }        
        //System.out.println(temp1);        
        alltweets.removeAll(temp1);
        //System.out.println(alltweets);
        String serItem = entries.getText();
        for(int i=0;i<alltweets.size();i++){
            String tweet123 = alltweets.get(i);
            if(tweet123.contains(serItem)){
                System.out.println(tweet123);
            }
        }
        
        //
        }catch(Exception e)
        {
            System.out.println(e);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try{
       
       FileInputStream fis = new FileInputStream("consolt.txt");
       ObjectInputStream ois = new ObjectInputStream(fis);
       String consolCount = (String)ois.readObject();
       ois.close();
       fis.close();
       
            //System.out.println("consolCount"+consolCount);
       int posNeg = 0;
       int negPos = 0;
       int posPos = 0;
       int negNeg = 0;
       StringTokenizer st = new StringTokenizer(consolCount," ");
       while(st.hasMoreTokens()){
           posNeg = Integer.parseInt(st.nextToken());
           negPos = Integer.parseInt(st.nextToken());
           posPos = Integer.parseInt(st.nextToken());
           negNeg = Integer.parseInt(st.nextToken());
       }
       
      int cosolCombs = posNeg + negPos;
      
      System.out.println("total mixed positive and negative Counts:"+cosolCombs);
       
       int posNegPosPos = posNeg + negPos + posPos+pCount;
       System.out.println("total mixed positive and positive Counts:"+posNegPosPos);
       int negPosNegNeg = posNeg + negPos + negNeg+nCount;
       System.out.println("total mixed negative and negative Counts : :"+negPosNegNeg);
       
       String unlabeledEstimation = "";
       float accuracy = 0.0f;
       
       if(posNegPosPos > negPosNegNeg){
           unlabeledEstimation = "labled is estimated as positive ";
           float ff = (float)posNegPosPos/Tweetsize;
           
           System.out.println("Positive side:"+ff);
           accuracy = ff * 100;
       }
       if(posNegPosPos < negPosNegNeg){
           unlabeledEstimation = "labled is estimated as Negetive ";
           float ff = (float)negPosNegNeg/Tweetsize;
            System.out.println("Negative side:"+ff);
           accuracy = ff * 100;
           
       }
       
            System.out.println("accuracy"+accuracy);
       if(posNegPosPos == negPosNegNeg){
           unlabeledEstimation = "labled is estimated as Mixed.. ";
           accuracy = 0f;
       }
        System.out.println("Most Dominating Label Data is >>>>>>"+unlabeledEstimation);
       JOptionPane.showMessageDialog(null, unlabeledEstimation+" with accuracy "+accuracy+"%");
       System.out.println("accuracy is "+accuracy);
       
       
       
      final Barchartconsol demo = new Barchartconsol("====FINAL CONSOLE ANALYSIS=====",posNegPosPos,negPosNegNeg);
       demo.pack();
       RefineryUtilities.centerFrameOnScreen(demo);
       demo.setVisible(true);
       
       //displaying of unlabeled data to other window..starts
       String selString = entries.getText();
       ArrayList<String> allTweets = new ArrayList<String>(); 
       allTweets.clear();
       ArrayList<String> posDict = new ArrayList<String>(); 
       posDict.clear();
       ArrayList<String> negDict = new ArrayList<String>(); 
       negDict.clear();
       allTweets = alltweets;
       FileInputStream fis2 = new FileInputStream("hotelpos.txt");
        byte bb2[] = new byte[fis2.available()];
        fis2.read(bb2);
        fis2.close();
        String aa2 = new String(bb2);
        //possdic.add(aa2);
        StringTokenizer st1 = new StringTokenizer(aa2,"\r\n");
        while(st1.hasMoreTokens())
        {
        posDict.add(st1.nextToken());
        }
       
       
       FileInputStream fis3 = new FileInputStream("hotelneg.txt");
        byte bb3[] = new byte[fis3.available()];
        fis3.read(bb3);
        fis3.close();
        String aa3 = new String(bb3);
        //possdic.add(aa2);
        StringTokenizer st3 = new StringTokenizer(aa3,"\r\n");
        while(st3.hasMoreTokens())
        {
        negDict.add(st3.nextToken());
        }
        
        
        String tweet="";
        String tweet1="";
        String poss="";
        String negg="";
        
        ArrayList<Integer> nonDictTweets = new ArrayList<Integer>();
        nonDictTweets.clear();
        ArrayList<Integer> nonNDictTweets = new ArrayList<Integer>();
        nonNDictTweets.clear();
        
        ArrayList<Integer> bothIndexes = new ArrayList<Integer>();
        bothIndexes.clear();
        
         for(int i=0;i<alltweets.size();i++)
        {
            tweet=alltweets.get(i);   
            for(int j=0;j<negdic.size();j++){
                negg = negdic.get(j);
                if(tweet.contains(negg)){
                   nonNDictTweets.add(i);
                }
            }
        }
        
        for(int i=0;i<alltweets.size();i++)
        {
            tweet=alltweets.get(i);   
            for(int j=0;j<possdic.size();j++){
                poss = possdic.get(j);
                if(tweet.contains(poss)){
                   nonDictTweets.add(i);
                }
            }
        }
       
        for(int i=0;i<nonDictTweets.size();i++){
           // System.out.println(nonDictTweets.get(i));
        }
        //
        System.out.println("---------------------------");
        for(int i=0;i<nonNDictTweets.size();i++){
           // System.out.println(nonNDictTweets.get(i));
        }
        System.out.println("---------------------------");
        for(int i=0;i<alltweets.size();i++)
        {
            tweet1=alltweets.get(i);   
            for(int j=0;j<negdic.size();j++){
                negg = negdic.get(j);
                if(tweet1.contains(negg)){
                   nonNDictTweets.add(i);
                }
            }
        }
        //
        
        Set set = new HashSet(nonDictTweets);
        nonDictTweets.clear();
        nonDictTweets.addAll(set);
        //System.out.println(nonDictTweets);
        //System.out.println(nonDictTweets.size());
        
        ArrayList<String> temp = new ArrayList<String>();
        temp.clear();
        
        for(int i=0;i<nonDictTweets.size();i++){
            int index = nonDictTweets.get(i);
            temp.add(alltweets.get(index));
        }        
        System.out.println(temp);        
        //alltweets.removeAll(temp);
        //System.out.println(alltweets);
        
        
        //System.out.println("---------------------------");
        
        //
        Set set1 = new HashSet(nonNDictTweets);
        nonNDictTweets.clear();
        nonNDictTweets.addAll(set1);
        //System.out.println(nonNDictTweets);
        //System.out.println(nonNDictTweets.size());
        
        ArrayList<String> temp1 = new ArrayList<String>();
        temp1.clear();
        
        for(int i=0;i<nonNDictTweets.size();i++){
            int index1 = nonNDictTweets.get(i);
            temp1.add(alltweets.get(index1));
        }        
        //System.out.println(temp1);        
        //System.out.println("---------------------------");
        
        
        //System.out.println(alltweets);
        //
        
        ArrayList<String> allRelavantTweets = new ArrayList<String>();
        allRelavantTweets.clear();
        
        for(int i=0;i<temp.size();i++){
            allRelavantTweets.add(temp.get(i));
        }
        
        for(int i=0;i<temp1.size();i++){
            allRelavantTweets.add(temp1.get(i));
        }
        
        alltweets.removeAll(allRelavantTweets);
        
        for(int i=0;i<alltweets.size();i++){
           // System.out.println(alltweets.get(i));
        }
        //System.out.println("---------------------------");
        ArrayList<String> relTweets = new ArrayList<String>();
        relTweets.clear();
        
        for(int i=0;i<alltweets.size();i++){
            String tweetCurrent = alltweets.get(i);
            if(tweetCurrent.contains(selString)){
               relTweets.add(tweetCurrent); 
            }
        }
        for(int i=0;i<relTweets.size();i++){
           System.out.println(relTweets.get(i));
        }
        
        //displaying of unlabeled data to other window..ends 
       FinalAnalisysUnlabeled us = new FinalAnalisysUnlabeled(relTweets);
       us.setVisible(true);
       }catch(Exception e){
           System.out.println(e);
       }
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AnlysisTwrFtp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AnlysisTwrFtp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AnlysisTwrFtp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AnlysisTwrFtp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AnlysisTwrFtp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton analisys;
    private javax.swing.JButton analysis;
    private javax.swing.JComboBox<String> category;
    private javax.swing.JTextField entries;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables
}

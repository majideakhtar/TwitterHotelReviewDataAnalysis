/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Ftppackage;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.ui.RefineryUtilities;
import twitter4j.Status;
import twitter4j.TwitterFactory;
import twitter4j.conf.ConfigurationBuilder;
/**
 *
 * @author comp
 */
public class FinalFrameForTweetsanalisis extends javax.swing.JFrame {

    /**
     * Creates new form FinalFrameForTweetsanalisis
     */
    public FinalFrameForTweetsanalisis() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        t1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        t2 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tweets = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        tweets2 = new javax.swing.JTextArea();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        tweets3 = new javax.swing.JTextArea();
        jButton6 = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        t3 = new javax.swing.JTextArea();
        jButton7 = new javax.swing.JButton();
        category = new javax.swing.JComboBox<>();
        jButton9 = new javax.swing.JButton();
        entries = new javax.swing.JTextField();
        analisys = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jButton10 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jTextField1 = new javax.swing.JTextField();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jToggleButton2 = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        getContentPane().setLayout(null);

        t1.setColumns(20);
        t1.setRows(5);
        jScrollPane1.setViewportView(t1);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(0, 250, 290, 180);

        t2.setColumns(20);
        t2.setRows(5);
        jScrollPane2.setViewportView(t2);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(310, 250, 290, 180);

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setText("LOAD ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(120, 460, 80, 30);

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton2.setText("LOAD");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(430, 450, 80, 30);

        tweets.setColumns(20);
        tweets.setRows(5);
        jScrollPane3.setViewportView(tweets);

        getContentPane().add(jScrollPane3);
        jScrollPane3.setBounds(10, 60, 280, 96);

        tweets2.setColumns(20);
        tweets2.setRows(5);
        jScrollPane4.setViewportView(tweets2);

        getContentPane().add(jScrollPane4);
        jScrollPane4.setBounds(310, 60, 290, 96);

        jButton4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton4.setText("Post");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4);
        jButton4.setBounds(110, 180, 80, 30);

        jButton5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton5.setText("Post");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5);
        jButton5.setBounds(420, 180, 80, 30);

        tweets3.setColumns(20);
        tweets3.setRows(5);
        tweets3.setText("hhfgh");
        jScrollPane5.setViewportView(tweets3);

        getContentPane().add(jScrollPane5);
        jScrollPane5.setBounds(620, 60, 290, 100);

        jButton6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton6.setText("Post");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton6);
        jButton6.setBounds(720, 180, 70, 25);

        t3.setColumns(20);
        t3.setRows(5);
        jScrollPane6.setViewportView(t3);

        getContentPane().add(jScrollPane6);
        jScrollPane6.setBounds(620, 250, 290, 180);

        jButton7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton7.setText("load");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton7);
        jButton7.setBounds(730, 450, 70, 30);

        category.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        category.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Politics", "ECommerce", "Bussiness" }));
        category.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryActionPerformed(evt);
            }
        });
        getContentPane().add(category);
        category.setBounds(200, 530, 160, 40);

        jButton9.setText("Submit");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton9);
        jButton9.setBounds(200, 580, 90, 30);

        entries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entriesActionPerformed(evt);
            }
        });
        getContentPane().add(entries);
        entries.setBounds(400, 530, 180, 40);

        analisys.setText("Association and Non Association");
        analisys.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analisysActionPerformed(evt);
            }
        });
        getContentPane().add(analisys);
        analisys.setBounds(390, 580, 200, 40);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Twitter 1");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(20, 30, 70, 20);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Twitter 2");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(310, 30, 70, 17);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Twitter 3");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(620, 30, 80, 17);

        jButton3.setText("Friendly Analysis");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(630, 510, 130, 40);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Ftppackage/t7.jpg"))); // NOI18N
        jLabel2.setText("jLabel2");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, 0, 930, 650);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Twitter 1");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(20, 30, 70, 20);

        jButton8.setText("jButton8");
        getContentPane().add(jButton8);
        jButton8.setBounds(670, 570, 73, 23);

        jToggleButton1.setText("jToggleButton1");
        getContentPane().add(jToggleButton1);
        jToggleButton1.setBounds(690, 580, 105, 23);

        jButton10.setText("jButton10");
        getContentPane().add(jButton10);
        jButton10.setBounds(680, 580, 79, 23);
        getContentPane().add(jSeparator1);
        jSeparator1.setBounds(600, 580, 0, 2);

        jTextField1.setText("jTextField1");
        getContentPane().add(jTextField1);
        jTextField1.setBounds(750, 560, 59, 20);

        jButton11.setText("jButton11");
        getContentPane().add(jButton11);
        jButton11.setBounds(740, 570, 79, 23);

        jButton12.setText("jButton12");
        getContentPane().add(jButton12);
        jButton12.setBounds(690, 570, 79, 23);

        jButton13.setText("jButton13");
        getContentPane().add(jButton13);
        jButton13.setBounds(680, 580, 79, 23);

        jToggleButton2.setText("jToggleButton2");
        getContentPane().add(jToggleButton2);
        jToggleButton2.setBounds(660, 350, 105, 23);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       try{
           t1.removeAll();
           t1.setText("");
           ConfigurationBuilder cb = new ConfigurationBuilder();
            cb.setDebugEnabled(true)
                  .setOAuthConsumerKey("h7rELC2CwdD4z32qHBeBfVmnr")
                  .setOAuthConsumerSecret("nN444NbyxBGKBKnehgeJA6VG1yfpfgvkFwFGHfHOsefGEnjlAd")
                  .setOAuthAccessToken("879626211818782720-s4JJmnIbY9Mun8zCChmgLpg3GUlemXv")
                  .setOAuthAccessTokenSecret("scJcm8Ryi97rdgkgLX3RbMFKB00RNccuVDz9XQCXozSry");


            TwitterFactory tf=new TwitterFactory(cb.build());  

            twitter4j.Twitter tw=tf.getInstance();
            List<Status> status=  tw.getHomeTimeline();
            String allTweets="";
            String EOL = "\r\n";
            for (Status status1 : status)
            {
              System.out.println(status1.getUser().getName() + ":" + status1.getText());
              System.out.println("location>>"+status1.getUser().getLocation());
               System.out.println("language>>"+status1.getUser().getLang());
               allTweets +=status1.getUser().getName() + ":" + status1.getText() + EOL;
               t1.append(status1.getUser().getName() + ":" + status1.getText() + ":" + status1.getUser().getLocation() + ":" + status1.getUser().getLang() + EOL);
            }

              FileOutputStream fos= new FileOutputStream("alltweets1.txt");
              fos.write(allTweets.getBytes());
              fos.close();
       }catch(Exception e){
           System.out.println(e);
       }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try{
            t2.removeAll();
            t2.setText("");
        ConfigurationBuilder cb1 = new ConfigurationBuilder();
            cb1.setDebugEnabled(true)
                  .setOAuthConsumerKey("E3Y85Y2qB1iid1BXKvOGsrTbQ")
                  .setOAuthConsumerSecret("12v5q1pNChwog4JPaQ1aymjHvjZiHMXteObRR4JgrAo12KBIaA")
                  .setOAuthAccessToken("879629672186757120-jcIAbOo2tCANHeQ0HxX2MDgHhygI29B")
                  .setOAuthAccessTokenSecret("GwP9jYy88yVheGseDGKkESQb0in1tSlUzM09ARiv4az2S");


            TwitterFactory tf1=new TwitterFactory(cb1.build());  

            twitter4j.Twitter tw1=tf1.getInstance();
            List<Status> status1=  tw1.getHomeTimeline();
            String allTweets1="";
            String EOL1 = "\r\n";
            for (Status status11 : status1)
            {
              System.out.println(status11.getUser().getName() + ":" + status11.getText());
              System.out.println("location>>"+status11.getUser().getLocation());
               System.out.println("language>>"+status11.getUser().getLang());
               allTweets1 +=status11.getUser().getName() + ":" + status11.getText()  + EOL1;
               t2.append(status11.getUser().getName() + ":" + status11.getText() + ":" + status11.getUser().getLocation() + ":" + status11.getUser().getLang() + EOL1);
            }
              FileOutputStream fos1= new FileOutputStream("alltweets2.txt");
              fos1.write(allTweets1.getBytes());
              fos1.close();
       
//              FileOutputStream fos11= new FileOutputStream("alltweets.txt");
//              fos1.write(allTweets1.getBytes());
//              fos1.close();
        
        
        }catch(Exception e)
              {
            System.out.println(e);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
       
        try{
            
            ConfigurationBuilder cb = new ConfigurationBuilder();
          cb.setDebugEnabled(true)
                .setOAuthConsumerKey("h7rELC2CwdD4z32qHBeBfVmnr")
                .setOAuthConsumerSecret("nN444NbyxBGKBKnehgeJA6VG1yfpfgvkFwFGHfHOsefGEnjlAd")
                .setOAuthAccessToken("879626211818782720-s4JJmnIbY9Mun8zCChmgLpg3GUlemXv")
                .setOAuthAccessTokenSecret("scJcm8Ryi97rdgkgLX3RbMFKB00RNccuVDz9XQCXozSry");
          
          
         TwitterFactory tf=new TwitterFactory(cb.build());  
     String EOL1 = "\r\n";
     twitter4j.Twitter tw=tf.getInstance();
     String myTweet=tweets.getText();
     Status stat= tw.updateStatus(myTweet);
          
          System.out.println("Twitter updated");
          JOptionPane.showMessageDialog(null, "Twitter updated");
    }                                        
catch(Exception e)
        {
            System.out.println("dfd"+ e);
        }
        
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        
        try{
         ConfigurationBuilder cb = new ConfigurationBuilder();
          cb.setDebugEnabled(true)
                .setOAuthConsumerKey("E3Y85Y2qB1iid1BXKvOGsrTbQ")
                .setOAuthConsumerSecret("12v5q1pNChwog4JPaQ1aymjHvjZiHMXteObRR4JgrAo12KBIaA")
                .setOAuthAccessToken("879629672186757120-jcIAbOo2tCANHeQ0HxX2MDgHhygI29B")
                .setOAuthAccessTokenSecret("GwP9jYy88yVheGseDGKkESQb0in1tSlUzM09ARiv4az2S");
          
          
         TwitterFactory tf=new TwitterFactory(cb.build());  
     String EOL1 = "\r\n";
     twitter4j.Twitter tw=tf.getInstance();
     String myTweet=tweets2.getText();
     Status stat= tw.updateStatus(myTweet);
          
          System.out.println("Twitter updated");
          JOptionPane.showMessageDialog(null, "2nd Twitter updated");
                           
        }catch(Exception e1)
        {
            System.out.println(e1);
        }
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
       
        try{
         ConfigurationBuilder cb = new ConfigurationBuilder();
          cb.setDebugEnabled(true)
                .setOAuthConsumerKey("8F1w9QVGe0CDYQD2gWuCiLtl9")
                .setOAuthConsumerSecret("oaZgRZOuveBY15xPO2zrWhPol8PwntBmDpZpvFoisGRFuqrugT")
                .setOAuthAccessToken("879631071930798080-N2JkcXS1ney9MXRBz7Ft6lyUwZA9PQq")
                .setOAuthAccessTokenSecret("5OJ5UJMU9oUAwHgmLx4OKjzXBBqX4Lq2qD12nYpi3fdrw");
          
          
         TwitterFactory tf=new TwitterFactory(cb.build());  
     String EOL1 = "\r\n";
     twitter4j.Twitter tw=tf.getInstance();
     String myTweet=tweets3.getText();
     Status stat= tw.updateStatus(myTweet);
          
          System.out.println("Twitter updated");
          JOptionPane.showMessageDialog(null, "3rd Twitter updated");
                           
        }catch(Exception e1)
        {
            System.out.println(e1);
        }
        
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
       
        try{
            t3.removeAll();
            t3.setText("");
        ConfigurationBuilder cb1 = new ConfigurationBuilder();
            cb1.setDebugEnabled(true)
                  .setOAuthConsumerKey("8F1w9QVGe0CDYQD2gWuCiLtl9")
                  .setOAuthConsumerSecret("oaZgRZOuveBY15xPO2zrWhPol8PwntBmDpZpvFoisGRFuqrugT")
                  .setOAuthAccessToken("879631071930798080-N2JkcXS1ney9MXRBz7Ft6lyUwZA9PQq")
                  .setOAuthAccessTokenSecret("5OJ5UJMU9oUAwHgmLx4OKjzXBBqX4Lq2qD12nYpi3fdrw");
            TwitterFactory tf1=new TwitterFactory(cb1.build());  

            twitter4j.Twitter tw1=tf1.getInstance();
            List<Status> status1= new ArrayList<Status>();
            status1.clear();
            status1 = tw1.getHomeTimeline();
            String allTweets1="";
            String EOL1 = "\r\n";
            for (Status status11 : status1)
            {
              //System.out.println(status11.getUser().getName() + ":" + status11.getText());
             // System.out.println("location>>"+status11.getUser().getLocation());
              // System.out.println("language>>"+status11.getUser().getLang());
               allTweets1 +=status11.getUser().getName() + ":" + status11.getText()  + EOL1;
               t3.append(status11.getUser().getName() + ":" + status11.getText() + ":" + status11.getUser().getLocation() + ":" + status11.getUser().getLang() + EOL1);
            }
              FileOutputStream fos1= new FileOutputStream("alltweets3.txt");
              fos1.write(allTweets1.getBytes());
              fos1.close();
        
FileInputStream fis11 = new FileInputStream("alltweets1.txt");
byte bb11[] = new byte[fis11.available()];
fis11.read(bb11);
fis11.close();
String all = new String(bb11);

FileInputStream fis12 = new FileInputStream("alltweets2.txt");
byte bb12[] = new byte[fis12.available()];
fis12.read(bb12);
fis12.close();
String all1 = new String(bb12);

FileInputStream fis13 = new FileInputStream("alltweets3.txt");
byte bb13[] = new byte[fis13.available()];
fis13.read(bb13);
fis13.close();
String all2 = new String(bb13);

FileOutputStream fos11 = new FileOutputStream("wholetweets.txt");
 fos11.write(bb11);
 fos11.write(bb12);
 fos11.write(bb13);
 fos11.close();


        }catch(Exception e){
            System.out.println(e);
        }                
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
       
        try{
       String selItem = (String)category.getSelectedItem();
      
       
       
        entries.setEditable(true);
       analisys.setEnabled(true);
       
       
       }catch(Exception e)
               {
               System.out.println(e);
               
               }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
       try{
       entries.setEditable(false);
       analisys.setEnabled(false);
       
       }catch(Exception e){
           System.out.println(e);
       }
    }//GEN-LAST:event_formComponentShown

    private void analisysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analisysActionPerformed
       try{
            //Politics, ECommerce, Bussiness

        String selItem = category.getSelectedItem().toString();
        String serItem = entries.getText();
        ArrayList<String> allTweets = new ArrayList<String>();
        allTweets.clear();
        FileInputStream fis = new FileInputStream("wholetweets.txt");
        byte bb[] = new byte[fis.available()];
        fis.read(bb);
        fis.close();       
        String allTweetsTxt = new String(bb);
        StringTokenizer st = new StringTokenizer(allTweetsTxt,"\r\n");        
        while(st.hasMoreTokens()){
        String temp = st.nextToken();        
           allTweets.add(temp); 

        }  
        ArrayList<String> allScatteredTweets = new ArrayList<String>();
        allScatteredTweets.clear();

        for(int i=0;i<allTweets.size();i++){
           String tweet = allTweets.get(i);
           if(tweet.contains(serItem)){
               allScatteredTweets.add(tweet);
           }
        }
        
        int pCount = 0;
        int nCount = 0;
        int pNCount = 0;
        int nPCount = 0;
        int ppCount = 0;
        int nnCount = 0;
        
        String posDictString = new String();
        String negDictString = new String();
        FrameDictionary fd = new FrameDictionary();
        posDictString = fd.getPositiveDictionaryString(selItem);
        negDictString = fd.getNegetiveDictionaryString(selItem);
        for(int i=0;i<allScatteredTweets.size();i++){
            String tweet = allScatteredTweets.get(i);
            tweet = fd.cleanedTweet(tweet);
            //System.out.println("tweet after clear "+tweet);
            StringTokenizer st1 = new StringTokenizer(tweet," ");
            while(st1.hasMoreTokens()){
                String token = st1.nextToken();
                
                if(posDictString.contains(token)){
                    //System.out.println(token+" pos");
                   ++pCount;
                }
                else if(negDictString.contains(token)){
                    //System.out.println(token+" neg");
                   ++nCount;
                }
            }
        }
        //Positiveneg starts
        
        for(int i=0;i<allScatteredTweets.size();i++){
            String tweet = allScatteredTweets.get(i);
            tweet = fd.cleanedTweet(tweet);
            String firstItem = "";
            String secondItem = "";
            ArrayList<String> ppDictionary = new ArrayList<String>();
            ppDictionary.clear();
            ppDictionary = fd.getPosNegAssociations(selItem);
            for(int j=0;j<ppDictionary.size();j++){
                String dictItem = ppDictionary.get(j);
                //System.out.println(dictItem);
                StringTokenizer st2 = new StringTokenizer(dictItem," ");
                while(st2.hasMoreTokens()){
                    firstItem = st2.nextToken();
                    secondItem = st2.nextToken();
                }
                
                if(tweet.contains(firstItem) && tweet.contains(secondItem)&&posDictString.contains(firstItem)&&negDictString.contains(secondItem) ){
                 int firstPos = tweet.indexOf(firstItem);
                 int secondPos = tweet.indexOf(secondItem);
                 if(secondPos>firstPos){
                ++pNCount;
                 }
            }
            }
        }
        //Positiveneg ends
        
        //negpos starts
        for(int i=0;i<allScatteredTweets.size();i++){
            String tweet = allScatteredTweets.get(i);
            tweet = fd.cleanedTweet(tweet);
            String firstItem = "";
            String secondItem = "";
            ArrayList<String> npDictionary = new ArrayList<String>();
            npDictionary.clear();
            npDictionary = fd.getNegPosAssociations(selItem);
            for(int j=0;j<npDictionary.size();j++){
                String dictItem = npDictionary.get(j);
                //System.out.println(dictItem);
                StringTokenizer st2 = new StringTokenizer(dictItem," ");
                while(st2.hasMoreTokens()){
                    firstItem = st2.nextToken();
                    secondItem = st2.nextToken();
                }
                
                if(tweet.contains(firstItem) && tweet.contains(secondItem)&&negDictString.contains(firstItem)&&posDictString.contains(secondItem) ){
                 int firstPos = tweet.indexOf(firstItem);
                 int secondPos = tweet.indexOf(secondItem);
                 if(secondPos>firstPos){
                ++nPCount;
                 }
            }
            }
        }
        //negpos ends
        //pospos starts
        
        for(int i=0;i<allScatteredTweets.size();i++){
            String tweet = allScatteredTweets.get(i);
            tweet = fd.cleanedTweet(tweet);
            String firstItem = "";
            String secondItem = "";
            ArrayList<String> pospDictionary = new ArrayList<String>();
            pospDictionary.clear();
            pospDictionary = fd.getPosPosAssociations(selItem);
            for(int j=0;j<pospDictionary.size();j++){
                String dictItem = pospDictionary.get(j);
                //System.out.println(dictItem);
                StringTokenizer st2 = new StringTokenizer(dictItem," ");
                while(st2.hasMoreTokens()){
                    firstItem = st2.nextToken();
                    secondItem = st2.nextToken();
                }
                
                if(tweet.contains(firstItem) && tweet.contains(secondItem)&&posDictString.contains(firstItem)&&posDictString.contains(secondItem) ){
                 int firstPos = tweet.indexOf(firstItem);
                 int secondPos = tweet.indexOf(secondItem);
                 if(secondPos>firstPos){
                ++ppCount;
                 }
            }
            }
        }
        //pospos ends
        
       //negneg starts
       for(int i=0;i<allScatteredTweets.size();i++){
            String tweet = allScatteredTweets.get(i);
            tweet = fd.cleanedTweet(tweet);
            String firstItem = "";
            String secondItem = "";
            ArrayList<String> negnDictionary = new ArrayList<String>();
            negnDictionary.clear();
            negnDictionary = fd.getNegNegAssociations(selItem);
            for(int j=0;j<negnDictionary.size();j++){
                String dictItem = negnDictionary.get(j);
                //System.out.println(dictItem);
                StringTokenizer st2 = new StringTokenizer(dictItem," ");
                while(st2.hasMoreTokens()){
                    firstItem = st2.nextToken();
                    secondItem = st2.nextToken();
                }
                
                if(tweet.contains(firstItem) && tweet.contains(secondItem)&&negDictString.contains(firstItem)&&negDictString.contains(secondItem) ){
                 int firstPos = tweet.indexOf(firstItem);
                 int secondPos = tweet.indexOf(secondItem);
                 if(secondPos>firstPos){
                ++nnCount;
                 }
            }
            }
        }
       //negneg ends
        System.out.println("pos count "+pCount);
        System.out.println("neg count "+nCount);
        System.out.println("posneg count "+pNCount);
        System.out.println("negpos count "+nPCount);
        System.out.println("pospos count "+ppCount);
        System.out.println("negneg count "+nnCount);
        
        int pMixedTotalCount = pNCount + nPCount + (ppCount*2);
        int nMixedTotalCount = pNCount + nPCount + (nnCount*2);
        
        int onlyPCount = pCount - pMixedTotalCount;
        int onlyNCount = nCount - nMixedTotalCount;
        
        
        PieChartAnalisys demo1 = new PieChartAnalisys( "Tweet postings positive" ,onlyPCount,pMixedTotalCount);  
        demo1.setSize( 560 , 367 );    
        RefineryUtilities.centerFrameOnScreen( demo1 );    
        demo1.setVisible( true ); 
        
        PieChartAnalisys demo2 = new PieChartAnalisys( "Tweet postings negetive" ,onlyNCount,nMixedTotalCount);  
        demo2.setSize( 560 , 367 );    
        RefineryUtilities.centerFrameOnScreen( demo2 );    
        demo2.setVisible( true );
       
            }catch(Exception e)
        {
            System.out.println(e);
        }
    
    }//GEN-LAST:event_analisysActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
       
        try{
                   
       ArrayList<String> allonline = new ArrayList<String>();
       allonline.clear();
       
       ArrayList<String> allftp = new ArrayList<String>();
       allftp.clear();
       
       ArrayList<String> finaltweetsforann = new ArrayList<String>();
       finaltweetsforann.clear();
       
       ArrayList<String> scateredtweets = new ArrayList<String>();
       scateredtweets.clear();
       
       ArrayList<String> friendtweets = new ArrayList<String>();
       friendtweets.clear();
       
       ArrayList<String> nonfriendtweets = new ArrayList<String>();
       nonfriendtweets.clear();
       
        FileInputStream fis = new FileInputStream("wholetweets.txt");
        byte bb[] = new byte[fis.available()];
        fis.read(bb);
        fis.close();
        String aa = new String(bb);
        allonline.add(aa);
        
        
        Runtime.getRuntime().exec("notepad wholetweets.txt");
        // System.out.println("asdfasdf"+allonline);
        
        FileInputStream fis1 = new FileInputStream("alltweetsfinal.txt");
        byte bb1[] = new byte[fis1.available()];
        fis1.read(bb1);
        fis1.close();
        String aa1 = new String(bb1);
        allftp.add(aa1);
        
        Runtime.getRuntime().exec("notepad alltweetsfinal.txt");
           // System.out.println("asdfasdf"+allftp);
           
           
           FileOutputStream fos11 = new FileOutputStream("finaltweetsforan.txt");
            fos11.write(bb);
            fos11.write(bb1);            
            fos11.close();
            
         Runtime.getRuntime().exec("notepad finaltweetsforan.txt");  
            
//         FileInputStream fis2 = new FileInputStream("finaltweetsforan.txt");
//         byte bb2[]= new byte[fis2.available()];
//         fis2.read(bb2);
//         fis2.close();
//         String aaa= new String(bb2);
//         aaa= aaa.trim();

//         StringTokenizer st = new StringTokenizer(aaa);
//         while(st.hasMoreTokens()){
//         finaltweetsforann.add(st.nextToken());
//         }
//         System.out.println("finaltweetsforan"+finaltweetsforann);
//
            BufferedReader br = new BufferedReader(new FileReader("finaltweetsforan.txt"));
        try {
            String line = br.readLine();
           
        
            while (line != null) {
                if(line.contains("sandeep3961") && (line.contains(entries.getText()))) {                               
                    friendtweets.add(line);
                   // System.out.println(line);
                }  if (line.contains("sandeep3963")&&  (line.contains(entries.getText()))) {
                    friendtweets.add(line);                 
                }  
                else if (line.contains("sandeep3962") && (line.contains(entries.getText())))
                {
                nonfriendtweets.add(line);
                }
                line = br.readLine();
            }       
        } finally {
            br.close();
        }

       // 
        int fpc=0;
        int fnc=0;
        int nfpc=0;
        int nfnc=0;
        
        
        String selItem1 = category.getSelectedItem().toString();
        String serItem1 = entries.getText();
        FrameDictionary fff = new FrameDictionary();
        fff.getPositiveDictionaryString(selItem1);
        
        String posDictString = new String();
        String negDictString = new String();
        FrameDictionary fd = new FrameDictionary();
        posDictString = fd.getPositiveDictionaryString(selItem1);
        negDictString = fd.getNegetiveDictionaryString(selItem1);
        for(int i=0;i<friendtweets.size();i++){
            String tweet = friendtweets.get(i);
            tweet = fd.cleanedTweet(tweet);
            //System.out.println("tweet after clear "+tweet);
            StringTokenizer st1 = new StringTokenizer(tweet," ");
            while(st1.hasMoreTokens()){
                String token = st1.nextToken();
                
                if(posDictString.contains(token)){
                    //System.out.println(token+" pos");
                   ++fpc;
                }
                else if(negDictString.contains(token)){
                   // System.out.println(token+" neg");
                   ++fnc;
                }
            }
        }
        
        for(int i=0;i<nonfriendtweets.size();i++){
            
            String tweet1 = nonfriendtweets.get(i);
            tweet1 = fd.cleanedTweet(tweet1);
            //System.out.println("tweet after clear "+tweet);
            StringTokenizer st1 = new StringTokenizer(tweet1," ");
            while(st1.hasMoreTokens()){
                String token = st1.nextToken();
                
                if(posDictString.contains(token)){
                    //System.out.println(token+" pos");
                   ++nfpc;
                }
                else if(negDictString.contains(token)){
                   // System.out.println(token+" neg");
                   ++nfnc;
                }
            }
        }
            System.out.println("frndposs>>>>"+fpc);
            System.out.println("frndnegg>>>"+fnc);
            
            
            
             System.out.println("nonfrndposs>>>>"+nfpc);
            System.out.println("nonfrndnegg>>>"+nfnc);
////

////
            
            
            
            
  //              
            System.out.println("frnd"+friendtweets);
            System.out.println("frnd"+friendtweets.size());            
            System.out.println("nonfrnd"+nonfriendtweets); 
            System.out.println("nonfrnd"+nonfriendtweets.size()); 
            
            
            
        final Barchart demo = new Barchart("====Friend Positive and Nagetive ANALISIS=====",fpc,fnc);
        demo.pack();
        RefineryUtilities.centerFrameOnScreen(demo);
        demo.setVisible(true);
        
        final Barchart1 demo1 = new Barchart1("====Non-Friend Positive and Nagetive ANALISIS=====",nfpc,nfnc);
        demo1.pack();
        RefineryUtilities.centerFrameOnScreen(demo1);
        demo1.setVisible(true);
        
//       s
        
//        final Barchartnonfrnd demo3 = new Barchartnonfrnd("====NonFriend REVIEW ANALISIS=====",nonfriendtweets);
//        demo3.pack();
//        RefineryUtilities.centerFrameOnScreen(demo3);
//        demo3.setVisible(true);
            
        }catch(Exception e)
        {
            System.out.println(e);
        } 
    }//GEN-LAST:event_jButton3ActionPerformed

    private void categoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_categoryActionPerformed

    private void entriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entriesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_entriesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FinalFrameForTweetsanalisis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FinalFrameForTweetsanalisis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FinalFrameForTweetsanalisis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FinalFrameForTweetsanalisis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
        FinalFrameForTweetsanalisis fff=new FinalFrameForTweetsanalisis();
        fff.setVisible(true);
           fff.setSize(930,680);                                             
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton analisys;
    private javax.swing.JComboBox<String> category;
    private javax.swing.JTextField entries;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JTextArea t1;
    private javax.swing.JTextArea t2;
    private javax.swing.JTextArea t3;
    private javax.swing.JTextArea tweets;
    private javax.swing.JTextArea tweets2;
    private javax.swing.JTextArea tweets3;
    // End of variables declaration//GEN-END:variables
}
package Ftppackage;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.ui.RefineryUtilities;
import twitter4j.Status;
import twitter4j.TwitterFactory;
import twitter4j.conf.ConfigurationBuilder;

/**
 *
 * @author knowx
 */
public class Tweets extends javax.swing.JFrame {

    /**
     * Creates new form Tweets
     */
    public Tweets() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tweets = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        movieName = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        category = new javax.swing.JComboBox<>();
        jButton4 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        getContentPane().setLayout(null);

        jButton1.setBackground(new java.awt.Color(255, 204, 0));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1.setText("LoadTweets");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(30, 290, 170, 30);

        jButton2.setBackground(new java.awt.Color(51, 255, 0));
        jButton2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton2.setText("PostTweet");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(410, 170, 120, 30);

        tweets.setColumns(20);
        tweets.setRows(5);
        jScrollPane1.setViewportView(tweets);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(410, 40, 238, 106);

        jPanel1.setLayout(null);
        getContentPane().add(jPanel1);
        jPanel1.setBounds(10, 11, 0, 0);

        jPanel2.setLayout(null);
        getContentPane().add(jPanel2);
        jPanel2.setBounds(654, 211, 0, 0);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextArea1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTextArea1);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(20, 20, 347, 257);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Enter Item for analisys");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(410, 350, 170, 17);

        movieName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                movieNameActionPerformed(evt);
            }
        });
        getContentPane().add(movieName);
        movieName.setBounds(410, 380, 200, 30);

        jButton5.setBackground(new java.awt.Color(0, 255, 255));
        jButton5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton5.setText("Check");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5);
        jButton5.setBounds(420, 430, 90, 30);

        category.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        category.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "movies", "hotels" }));
        category.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryActionPerformed(evt);
            }
        });
        getContentPane().add(category);
        category.setBounds(160, 360, 141, 30);

        jButton4.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jButton4.setText("analize");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4);
        jButton4.setBounds(160, 410, 80, 30);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Select Category :");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(30, 360, 130, 30);

        jButton3.setText("2");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(270, 300, 39, 23);

        jButton6.setText("2");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton6);
        jButton6.setBounds(560, 180, 73, 23);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Ftppackage/t1.jpg"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(-10, 0, 680, 500);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        
        try{
            ConfigurationBuilder cb = new ConfigurationBuilder();
          cb.setDebugEnabled(true)
                .setOAuthConsumerKey("M0012PNVsORW4Sdl25POKg0vp")
                .setOAuthConsumerSecret("mgjfnI8FsUzjjImciX1bI3kJ8mUNuTXp3zgQ83vghzbMpyPHwH")
                .setOAuthAccessToken("828074146584145924-S2SC9EQInhFXvWI5XxdQ29XapQX5bbs")
                .setOAuthAccessTokenSecret("v7QpnhVwephCc8ilFAibdCj7eFFZu05qwdzPklq8LitT9");
          
          
         TwitterFactory tf=new TwitterFactory(cb.build());  
     
     twitter4j.Twitter tw=tf.getInstance();
     List<Status> status=  tw.getHomeTimeline();
      String allTweets="";
      String EOL = "\r\n";
         for (Status status1 : status)
         {
            System.out.println(status1.getUser().getName() + ":" + status1.getText());
            System.out.println("location>>"+status1.getUser().getLocation());
             System.out.println("language>>"+status1.getUser().getLang());
             allTweets +=status1.getUser().getName() + ":" + status1.getText() + EOL;
         }
            
            FileOutputStream fos= new FileOutputStream("alltweets.txt");
            fos.write(allTweets.getBytes());
            fos.close();
            
          jTextArea1.setText(allTweets);
        }
        catch(Exception e)
        {
            System.out.println("dsf"+ e);
        }
        

        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       
        
        try{
            
            ConfigurationBuilder cb = new ConfigurationBuilder();
          cb.setDebugEnabled(true)
                .setOAuthConsumerKey("M0012PNVsORW4Sdl25POKg0vp")
                .setOAuthConsumerSecret("mgjfnI8FsUzjjImciX1bI3kJ8mUNuTXp3zgQ83vghzbMpyPHwH")
                .setOAuthAccessToken("828074146584145924-S2SC9EQInhFXvWI5XxdQ29XapQX5bbs")
                .setOAuthAccessTokenSecret("v7QpnhVwephCc8ilFAibdCj7eFFZu05qwdzPklq8LitT9");
          
          
         TwitterFactory tf=new TwitterFactory(cb.build());  
     String EOL1 = "\r\n";
     twitter4j.Twitter tw=tf.getInstance();
     String myTweet=tweets.getText();
     Status stat= tw.updateStatus(myTweet);
          
          System.out.println("Twitter updated");
          JOptionPane.showMessageDialog(null, "Twitter updated");
    }//GEN-LAST:event_jButton2ActionPerformed
catch(Exception e)
        {
            System.out.println("dfd"+ e);
        }
    
    }
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
       try{
           
       String selItem = (String)category.getSelectedItem();
       
       
       
       
       if(selItem.equals("movies")){
           
       String movieame1 = movieName.getText();
       
       ////
       
        ArrayList<String> allEnteredOnes = new ArrayList<String>();
       allEnteredOnes.clear();
       StringTokenizer st11 = new StringTokenizer(movieame1,",");
       while(st11.hasMoreTokens()){
         String enOn = st11.nextToken();
         allEnteredOnes.add(enOn);
       }
       String movieame = "";
       for(int ll=0;ll<allEnteredOnes.size();ll++){
          movieame = allEnteredOnes.get(ll);
       
       
       ////
       ArrayList<String> allTweets = new ArrayList<String>();
       
       ArrayList<String> allPositiveDitionary = new ArrayList<String>();
       ArrayList<String> allNegetiveDitionary = new ArrayList<String>();
       //
       int sizeP = 0;
       int sizeN = 0;
       
       allTweets.clear();
       allPositiveDitionary.clear();
       allNegetiveDitionary.clear();
       FileInputStream fis = new FileInputStream("alltweets.txt");
       byte bb[] = new byte[fis.available()];
       fis.read(bb);
       fis.close();       
       String allTweetsTxt = new String(bb);
       StringTokenizer st = new StringTokenizer(allTweetsTxt,"\r\n");
          // System.out.println("gjhgjhg"+ allTweetsTxt);
       while(st.hasMoreTokens()){
        String temp = st.nextToken();
        if(temp.contains(movieame)){
           allTweets.add(temp); 
        }
       }  
       int size = allTweets.size();
       JOptionPane.showMessageDialog(null,"The movie "+movieame+" contains "+size+" tweets...!");
       
       //analitical oode starts....
       
       FileInputStream fisP = new FileInputStream("positive.txt");
       byte bb1[] = new byte[fisP.available()];
       fisP.read(bb1);
       fisP.close();
       String allPString = new String(bb1);
       StringTokenizer st1 = new StringTokenizer(allPString,"\r\n");
       while(st1.hasMoreTokens()){
       String tP = (String)st1.nextToken();
          allPositiveDitionary.add(tP);
           
       }
       
       FileInputStream fisN = new FileInputStream("negetive.txt");
       byte bb2[] = new byte[fisN.available()];
       fisN.read(bb2);
       fisN.close();
       String allNString = new String(bb2);
       StringTokenizer st2 = new StringTokenizer(allNString,"\r\n");
       while(st2.hasMoreTokens()){
       String tN = (String)st2.nextToken();
          allNegetiveDitionary.add(tN);           
       }
     //  System.out.println(allPositiveDitionary);
     //  System.out.println(allNegetiveDitionary);
       sizeP = 0;
       sizeN = 0;
       /////
       for(String al : allTweets)
       {
           System.out.println("sdsadsd "+al);
       }
       
       for(int i=0;i<allPositiveDitionary.size();i++){
           String pWord = allPositiveDitionary.get(i);
           for(int j=0;j<allTweets.size();j++){
               String tweet = allTweets.get(j);
               
               if(tweet.contains(pWord))
               {
                   System.out.println("tweet "+ tweet);
               System.out.println("pword "+ pWord);
                   sizeP=sizeP+1;
               }
           }
       }
       
       for(int i=0;i<allNegetiveDitionary.size();i++){
           String nWord = allNegetiveDitionary.get(i);
           for(int j=0;j<allTweets.size();j++){
               String tweet = allTweets.get(j);
               if(tweet.contains(nWord)){
                   ++sizeN;
               }
           }
       }
       
       
       
       
       
       ////
       
           System.out.println("Positive Size"+ sizeP);
           System.out.println("Negative Size"+ sizeN);
       int f = 0;
       if(sizeP > sizeN){
           //JOptionPane.showMessageDialog(null, "The movie rating is good with frequency "+sizeP);
           f = 0;
       }
       else if(sizeP < sizeN){
           //JOptionPane.showMessageDialog(null, "The movie rating is not good with frequency "+sizeN);
           f = 1;
       }
       else if(sizeP == sizeN){
           //JOptionPane.showMessageDialog(null, "The movie rating neutral with frequency "+sizeN);
           f = 2;
       }
       ///acuracy calculation starts...
       double accuracy = 0.0f;
     double precision = 0.0f;
       double recall = 0.0f;
       if(f == 0){
           double d = (double)sizeP/allPositiveDitionary.size();
           accuracy = d * 100;  
          double acc1=(1-accuracy)*100;
           System.out.println("dfdf"+ acc1);
           double caccuracy=accuracy*100;
           double d1 = (double)allPositiveDitionary.size()-sizeP;
         precision = (double)d1/100;
           int d2 = sizeP - sizeN;
          recall  =  (double)d2/allTweets.size();
           String commentsFrequency = "total number of postings are:"+sizeP+"\r\n";
           JOptionPane.showMessageDialog(null, commentsFrequency+"positive posting with accuracy:"+accuracy+"Precision: "+precision+"Recall:"+recall);    
           System.out.println("accc"+ caccuracy);
           if(acc1>0 || acc1<50)
           {
               JOptionPane.showMessageDialog(null, "Good With Average accuracy of"+acc1);
           }
           else if(acc1>50 || acc1<100)
           {
             JOptionPane.showMessageDialog(null, "Awsome and good accuracy of"+acc1);  
           }
//           PieChartCountry demo = new PieChartCountry( "Segementing Tweets" ,sizeP,movieame,accuracy,precision,recall);  
//            demo.setSize( 560 , 367 );    
//            RefineryUtilities.centerFrameOnScreen( demo );    
//            demo.setVisible( true ); 
       }
       else if(f == 1){
           String commentsFrequency = "total number of negetive are:"+sizeN+"\r\n";
           double d = (double)sizeN/allNegetiveDitionary.size();
           accuracy = d * 100; 
           double acc1=(1-accuracy)*100;
           double caccuracy=accuracy*100;
           double d1 = (double)allNegetiveDitionary.size()-sizeN;
           precision = (double)d1/100;
           int d2 = sizeN - sizeP;
           recall  =  (double)d2/allTweets.size();
           JOptionPane.showMessageDialog(null, commentsFrequency+"negetive posting with accuracy:"+accuracy);  
           JOptionPane.showMessageDialog(null, commentsFrequency+"positive posting with accuracy:"+accuracy);    
           System.out.println("accc"+ accuracy*100);  
           if(acc1>0 || acc1<50)
           {
               JOptionPane.showMessageDialog(null, "Bad Movie accuracy of"+acc1);
           }
           else if(acc1>50 || acc1<100)
           {
             JOptionPane.showMessageDialog(null, "Very bad accuracy of"+acc1);  
           }
//           PieChartCountry demo = new PieChartCountry( "Segementing Tweets" ,sizeN,movieame,accuracy,precision,recall);  
//            demo.setSize( 560 , 367 );    
//            RefineryUtilities.centerFrameOnScreen( demo );    
//            demo.setVisible( true ); 
       }
       else if(f == 2){
           String commentsFrequency = "total number of postings are:"+sizeP+"\r\n";
           double d = (double)sizeP/allPositiveDitionary.size();
           accuracy = d * 100;   
           double acc1=(1-accuracy)*100;
           double caccuracy=accuracy*100;
           double d1 = (double)allPositiveDitionary.size()-sizeP;
           precision = (double)d1/100;
           int d2 = sizeP - sizeN;
           recall  =  (double)d2/allTweets.size();
           System.out.println("accc"+ accuracy*100);
           JOptionPane.showMessageDialog(null, commentsFrequency+"positive posting with accuracy:"+accuracy);           
           JOptionPane.showMessageDialog(null, commentsFrequency+"positive posting with accuracy:"+accuracy);    
           if(acc1>0 || acc1<50)
           {
               JOptionPane.showMessageDialog(null, "Good With Average accuracy of"+acc1);
           }
           else if(acc1>50 || acc1<100)
           {
             JOptionPane.showMessageDialog(null, "Awsome and good accuracy of"+acc1);  
           } 
//           PieChartCountry demo = new PieChartCountry( "Segementing Tweets" ,sizeP,movieame,accuracy,precision,recall);  
//            demo.setSize( 560 , 367 );    
//            RefineryUtilities.centerFrameOnScreen( demo );    
//            demo.setVisible( true ); 
       }}
       }
       else if(selItem.equals("hotels")){
           
           String movieame = "";
           String movieame1 = movieName.getText();
           
           ArrayList<String> allHoteslSelected = new ArrayList<String>();
           allHoteslSelected.clear();
           StringTokenizer ssss = new StringTokenizer(movieame1,",");
           while(ssss.hasMoreTokens()){
               allHoteslSelected.add(ssss.nextToken());
           }
         for(int ll=0;ll<allHoteslSelected.size();ll++)  {
           movieame = allHoteslSelected.get(ll);
          
       ArrayList<String> allTweets = new ArrayList<String>();
       
       ArrayList<String> allPositiveDitionary = new ArrayList<String>();
       ArrayList<String> allNegetiveDitionary = new ArrayList<String>();
       int sizeP = 0;
       int sizeN = 0;
       
       allTweets.clear();
       allPositiveDitionary.clear();
       allNegetiveDitionary.clear();
       FileInputStream fis = new FileInputStream("alltweets.txt");
       byte bb[] = new byte[fis.available()];
       fis.read(bb);
       fis.close();       
       String allTweetsTxt = new String(bb);
       StringTokenizer st = new StringTokenizer(allTweetsTxt,"\r\n");
       while(st.hasMoreTokens()){
        String temp = st.nextToken();
        if(temp.contains(movieame)){
           allTweets.add(temp); 
        }
       }  
       int size = allTweets.size();
       JOptionPane.showMessageDialog(null,"The movie "+movieame+" contains "+size+" tweets...!");
       
       //analitical oode starts....
       
       FileInputStream fisP = new FileInputStream("positiveH.txt");
       byte bb1[] = new byte[fisP.available()];
       fisP.read(bb1);
       fisP.close();
       String allPString = new String(bb1);
       StringTokenizer st1 = new StringTokenizer(allPString,"\r\n");
       while(st1.hasMoreTokens()){
       String tP = (String)st1.nextToken();
          allPositiveDitionary.add(tP);           
       }       
       FileInputStream fisN = new FileInputStream("negetiveH.txt");
       byte bb2[] = new byte[fisN.available()];
       fisN.read(bb2);
       fisN.close();
       String allNString = new String(bb2);
       StringTokenizer st2 = new StringTokenizer(allNString,"\r\n");
       while(st2.hasMoreTokens()){
       String tN = (String)st2.nextToken();
          allNegetiveDitionary.add(tN);           
       }
       System.out.println(allPositiveDitionary);
       System.out.println(allNegetiveDitionary);
       sizeP = 0;
       sizeN = 0;
       
       for(int i=0;i<allTweets.size();i++){
           //first loop
           String actualTweet = allTweets.get(i);
           for(int j=0;j<allPositiveDitionary.size();j++){
               //first inner looop
               String pWord = allPositiveDitionary.get(j);
               if(actualTweet.contains(pWord)){
                   ++sizeP;
               }
           }
           for(int k=0;k<allNegetiveDitionary.size();k++){
               //second inner loop
               String nWord = allNegetiveDitionary.get(k);
               if(actualTweet.contains(nWord)){
                   ++sizeN;
               }
           }
       }
       int f = 0;
       if(sizeP > sizeN){
           //JOptionPane.showMessageDialog(null, "The movie rating is good with frequency "+sizeP);
           f = 0;
       }
       else if(sizeP < sizeN){
           //JOptionPane.showMessageDialog(null, "The movie rating is not good with frequency "+sizeN);
           f = 1;
       }
       else if(sizeP == sizeN){
           //JOptionPane.showMessageDialog(null, "The movie rating neutral with frequency "+sizeN);
           f = 2;
       }
       ///acuracy calculation starts...
       double accuracy = 0.0f;
       double precision = 0.0f;
       double recall = 0.0f;
       if(f == 0){
           double d = (double)sizeP/allPositiveDitionary.size();
           accuracy = d * 100;    
           double acc1=(1-accuracy)*100;
           double d1 = (double)allPositiveDitionary.size()-sizeP;
          precision = (double)d1/100;
           int d2 = sizeP - sizeN;
          recall  =  (double)d2/allTweets.size();
          double caccuracy=accuracy*100;
          if(accuracy>0 || accuracy<50)
           {
               JOptionPane.showMessageDialog(null, "Good With Average accuracy of"+accuracy);
           }
           else if(accuracy>50 || accuracy<100)
           {
             JOptionPane.showMessageDialog(null, "Awsome and good accuracy of"+accuracy);  
           }
           String commentsFrequency = "total number of postings are:"+sizeP+"\r\n";
          try{
    System.out.println("Inside");
        
//        PieChartCountry demo = new PieChartCountry( "Segementing tweets" ,sizeP,movieame,accuracy,precision,recall);  
//        demo.setSize( 560 , 367 );    
//        RefineryUtilities.centerFrameOnScreen( demo );    
//        demo.setVisible( true ); 
}
catch(Exception ee)
{
    System.out.println("dfdsfds"+ee);
}
           
           
  JOptionPane.showMessageDialog(null, commentsFrequency+"positive posting with accuracy:"+accuracy+"Precision: "+precision+"Recall:"+recall);  
           
          
       }
       else if(f == 1)
       {
           String commentsFrequency = "total number of negetive are:"+sizeN+"\r\n";
           double d = (double)sizeN/allNegetiveDitionary.size();
           accuracy = d * 100;  
           double acc1=(1-accuracy)*100;
           double caccuracy=accuracy*100;
           double d1 = (double)allNegetiveDitionary.size()-sizeN;
           precision = (double)d1/100;
           int d2 = sizeN - sizeP;
          recall  =  (double)d2/allTweets.size();
           JOptionPane.showMessageDialog(null, commentsFrequency+"negetive posting with accuracy:"+accuracy);    
           if(accuracy>0 || accuracy<50)
           {
               JOptionPane.showMessageDialog(null, "Bad With  accuracy of"+accuracy);
           }
           else if(accuracy>50 || accuracy<100)
           {
             JOptionPane.showMessageDialog(null, "Very bad with accuracy of"+accuracy);  
           } 
//           PieChartCountry demo = new PieChartCountry( "Segementing Tweets" ,sizeN,movieame,accuracy,precision,recall);  
//            demo.setSize( 560 , 367 );    
//            RefineryUtilities.centerFrameOnScreen( demo );    
//            demo.setVisible( true ); 
       }
       else if(f == 2){
           String commentsFrequency = "total number of postings are:"+sizeP+"\r\n";
           double d = (double)sizeP/allPositiveDitionary.size();
           accuracy = d * 100;
           double acc1=(1-accuracy)*100;
           double caccuracy=accuracy*100;
           double d1 = (double)allPositiveDitionary.size()-sizeP;
           precision = (double)d1/100;
           int d2 = sizeP - sizeN;
           recall  =  (double)d2/allTweets.size();
           if(accuracy>0 || accuracy<50)
           {
               JOptionPane.showMessageDialog(null, "Good With Average accuracy of"+accuracy);
           }
           else if(accuracy>50 || accuracy<100)
           {
             JOptionPane.showMessageDialog(null, "Awsome and good accuracy of"+accuracy);  
           }
           JOptionPane.showMessageDialog(null, commentsFrequency+"positive posting with accuracy:"+accuracy);  
//            PieChartCountry demo = new PieChartCountry( "Segementing Tweets" ,sizeN,movieame,accuracy,precision,recall);  
//            demo.setSize( 560 , 367 );    
//            RefineryUtilities.centerFrameOnScreen( demo );    
//            demo.setVisible( true ); 
       }
       }
       }
       
       }catch(Exception e){
           System.out.println(e);
       }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        try{
        
        movieName.setEnabled(false);
        jButton5.setEnabled(false);
        
        }catch(Exception e){
            System.out.println(e);
        }
    }//GEN-LAST:event_formComponentShown

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
      try{
      String selItem = (String)category.getSelectedItem();
      movieName.setEnabled(true);
      jButton5.setEnabled(true);
      }catch(Exception e){
          System.out.println(e);
      }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void categoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_categoryActionPerformed

    private void movieNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_movieNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_movieNameActionPerformed

    private void jTextArea1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextArea1MouseClicked
      
        jTextArea1.setEditable(false);
        
        
    }//GEN-LAST:event_jTextArea1MouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
       
        try{
            ConfigurationBuilder cb = new ConfigurationBuilder();
          cb.setDebugEnabled(true)
                .setOAuthConsumerKey("ytVF73AXjdgC3QtuOXOsWjfQ1")
                .setOAuthConsumerSecret("15BpgDg2Q1gWdzrDjs6gHjgAd1kzCFbCbPnShyzALPQQHYPjl7")
                .setOAuthAccessToken("870551196259409920-a6Ubn5mq6OItK6lR2wL9wCoWvFaAx98")
                .setOAuthAccessTokenSecret("AzyA0zaezFkdjDl72qPf4u87omRPksiVI2vzLEtpJKMIi");
          
          
         TwitterFactory tf=new TwitterFactory(cb.build());  
     
     twitter4j.Twitter tw=tf.getInstance();
     List<Status> status=  tw.getHomeTimeline();
      String allTweets="";
      String EOL = "\r\n";
         for (Status status1 : status)
         {
            System.out.println(status1.getUser().getName() + ":" + status1.getText());
            System.out.println("location>>"+status1.getUser().getLocation());
             System.out.println("language>>"+status1.getUser().getLang());
             allTweets +=status1.getUser().getName() + ":" + status1.getText() + EOL;
         }
            
            FileOutputStream fos= new FileOutputStream("alltweets2.txt");
            fos.write(allTweets.getBytes());
            fos.close();
            
          jTextArea1.setText(allTweets);
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
        
        
        
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
       
        try{
         ConfigurationBuilder cb = new ConfigurationBuilder();
          cb.setDebugEnabled(true)
                .setOAuthConsumerKey("ytVF73AXjdgC3QtuOXOsWjfQ1")
                .setOAuthConsumerSecret("15BpgDg2Q1gWdzrDjs6gHjgAd1kzCFbCbPnShyzALPQQHYPjl7")
                .setOAuthAccessToken("870551196259409920-a6Ubn5mq6OItK6lR2wL9wCoWvFaAx98")
                .setOAuthAccessTokenSecret("AzyA0zaezFkdjDl72qPf4u87omRPksiVI2vzLEtpJKMIi");
          
          
         TwitterFactory tf=new TwitterFactory(cb.build());  
     String EOL1 = "\r\n";
     twitter4j.Twitter tw=tf.getInstance();
     String myTweet=tweets.getText();
     Status stat= tw.updateStatus(myTweet);
          
          System.out.println("Twitter updated");
          JOptionPane.showMessageDialog(null, "2nd Twitter updated");
                           
        }catch(Exception e1)
        {
            System.out.println(e1);
        }
       
    }//GEN-LAST:event_jButton6ActionPerformed
        
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tweets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tweets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tweets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tweets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
             Tweets t=   new Tweets();
             t.setVisible(true);
             t.setSize(670,500);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> category;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField movieName;
    private javax.swing.JTextArea tweets;
    // End of variables declaration//GEN-END:variables
}
